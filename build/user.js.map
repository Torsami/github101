{"version":3,"sources":["../src/user.js"],"names":["app","use","bodyParser","json","urlencoded","extended","text","type","secret","pool","pg","Pool","user","host","database","password","port","verifyToken","req","res","next","token","headers","authorization","split","decoded","jwt","verify","userData","error","cookie","status","send","success","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAH,IAAIC,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAL,IAAIC,GAAJ,CAAQC,qBAAWI,IAAX,EAAR;AACAN,IAAIC,GAAJ,CAAQC,qBAAWC,IAAX,CAAgB,EAAEI,MAAM,kBAAR,EAAhB,CAAR;;AAEA,IAAMC,SAAS,QAAf;;AAEA,IAAMC,OAAO,IAAIC,aAAGC,IAAP,CAAY;AACrBC,UAAM,cADe;AAErBC,UAAM,WAFe;AAGrBC,cAAU,YAHW;AAIrBC,cAAU,cAJW;AAKrBC,UAAM,MALe,EAAZ,CAAb;;AAQA,IAAMC,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAkB;;AAElC,QAAMC,QAAQH,IAAII,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;;AAEA,QAAG;AACC,YAAMC,UAAUC,uBAAIC,MAAJ,CAAWN,KAAX,EAAkBb,MAAlB,CAAhB;AACAU,YAAIU,QAAJ,GAAeH,OAAf;AACAL;AACH,KAJD,CAIC,OAAMS,KAAN,EAAY;AACTV,YAAIW,MAAJ,CAAW,UAAX,EAAuB,EAAvB;AACAX,YAAIW,MAAJ,CAAW,OAAX,EAAoB,EAApB;;AAEAX,YAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,4BADiB;AAEjBC;AAFiB,SAArB;AAIH;AAEJ,CAlBD;;kBAoBe,EAACzB,UAAD,EAAOQ,wBAAP,EAAoBT,cAApB,E","file":"user.js","sourcesContent":["import pg from 'pg';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst app = express();\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.text());                                    \r\napp.use(bodyParser.json({ type: 'application/json'})); \r\n\r\nconst secret = 'secret';\r\n\r\nconst pool = new pg.Pool({\r\n    user: 'samipostgres',\r\n    host: '127.0.0.1',\r\n    database: 'mydatabase',\r\n    password: 'samipostgres',\r\n    port: '5432'});\r\n\r\n\r\nconst verifyToken = (req, res, next)=>{\r\n\r\n    const token = req.headers.authorization.split(\" \")[1];\r\n\r\n    try{\r\n        const decoded = jwt.verify(token, secret);\r\n        req.userData = decoded;\r\n        next();\r\n    }catch(error){\r\n        res.cookie(\"userData\", '');\r\n        res.cookie(\"token\", '');\r\n        \r\n        res.status(401).send({\r\n            success: `false`,\r\n            message: `Auth failed`\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default {pool, verifyToken, secret};"]}