{"version":3,"sources":["../src/signUp.js"],"names":["app","use","bodyParser","json","urlencoded","extended","text","type","pool","user","signUp","req","res","body","email","username","password","verify","mailformat","replace","toLowerCase","status","send","success","message","field","match","query","err","result","rows","db","bcrypt","hash","Date","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAH,IAAIC,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAL,IAAIC,GAAJ,CAAQC,qBAAWI,IAAX,EAAR;AACAN,IAAIC,GAAJ,CAAQC,qBAAWC,IAAX,CAAgB,EAAEI,MAAM,kBAAR,EAAhB,CAAR;;AAEA,IAAMC,OAAOC,eAAKD,IAAlB;;AAGA,IAAME,SAAS,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,oBAGaD,IAAIE,IAHjB;AAAA,QAGxBC,KAHwB,aAGxBA,KAHwB;AAAA,QAGjBC,QAHiB,aAGjBA,QAHiB;AAAA,QAGPC,QAHO,aAGPA,QAHO;AAAA,QAGGC,MAHH,aAGGA,MAHH;;AAI7B,QAAIC,aAAa,+CAAjB;AACAH,eAAWA,SAASI,OAAT,CAAiB,iBAAjB,EAAoC,EAApC,EAAwCC,WAAxC,EAAX;;AAEA,QAAGL,aAAa,EAAhB,EAAmB;AACf,eAAOH,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,4BADwB;AAExBC,8CAFwB;AAGxBC;AAHwB,SAArB,CAAP;AAKH;;AAED,QAAG,CAACX,MAAMY,KAAN,CAAYR,UAAZ,CAAJ,EAA4B;AACxB,eAAON,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,4BADwB;AAExBC,0CAFwB;AAGxBC;AAHwB,SAArB,CAAP;AAKH;;AAED,QAAGT,aAAa,EAAhB,EAAmB;AACf,eAAOJ,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,4BADwB;AAExBC,8CAFwB;AAGxBC;AAHwB,SAArB,CAAP;AAKH;;AAED,QAAGR,WAAW,EAAd,EAAiB;AACb,eAAOL,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,4BADwB;AAExBC,8CAFwB;AAGxBC;AAHwB,SAArB,CAAP;AAKH;;AAEDjB,SAAKmB,KAAL,CAAW,yDAAX,EAAsE,CAACb,KAAD,EAAQC,QAAR,CAAtE,EAAyF,UAACa,GAAD,EAAMC,MAAN,EAAiB;;AAEtG,YAAG,OAAOA,OAAOC,IAAP,CAAY,CAAZ,CAAP,KAA2B,WAA9B,EAA0C;;AAEtC,gBAAMC,KAAKF,OAAOC,IAAP,CAAY,CAAZ,CAAX;;AAEA,gBAAGC,GAAGhB,QAAH,KAAgBA,QAAnB,EAA4B;AACxB,uBAAOH,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,oCADwB;AAExBC,qEAFwB;AAGxBC;AAHwB,iBAArB,CAAP;AAKH;;AAED,gBAAGM,GAAGjB,KAAH,KAAaA,KAAhB,EAAsB;AAClB,uBAAOF,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,6BAAS,OADe;AAExBC,6BAAS,uCAFe;AAGxBC;AAHwB,iBAArB,CAAP;AAKH;AAEJ,SApBD,MAoBK;AACD,gBAAGT,aAAaC,MAAhB,EAAuB;AACnB,uBAAOL,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,6BAAS,OADe;AAExBC,6BAAS,yBAFe;AAGxBC;AAHwB,iBAArB,CAAP;AAKH;;AAGDO,+BAAOC,IAAP,CAAYjB,QAAZ,EAAsB,EAAtB,EAA0B,UAACY,GAAD,EAAMK,IAAN,EAAe;AACrC,oBAAGL,GAAH,EAAQ;;AAEJ,2BAAOhB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACzBC,wCADyB;AAEzBC,iCAASI;AAFgB,qBAArB,CAAP;AAIH,iBAND,MAMK;AACDpB,yBAAKmB,KAAL,CAAW,+FAAX,EACA,CAACb,KAAD,EAAQC,QAAR,EAAkBkB,IAAlB,EAAwB,IAAIC,IAAJ,EAAxB,EAAoC,CAApC,CADA,EACwC,UAACN,GAAD,EAAMC,MAAN,EAAiB;;AAEjD,4BAAGA,MAAH,EAAU;;AAEN,mCAAOjB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,+CADwB;AAExBC;AAFwB,6BAArB,CAAP;AAIH,yBAND,MAMK;AACDW,oCAAQC,GAAR,CAAYR,GAAZ;AACA,mCAAOhB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,gDADwB;AAExBC,yCAASI;AAFe,6BAArB,CAAP;AAIH;AACR,qBAhBD;AAkBC;AACR,aA3BD;AA4BH;AAEA,KA9DL;AA+DC,CAtGD;;kBAwGelB,M","file":"signUp.js","sourcesContent":["import pg from 'pg';\r\nimport bcrypt from 'bcryptjs';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport user from './user';\r\n\r\nconst app = express();\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.text());                                    \r\napp.use(bodyParser.json({ type: 'application/json'})); \r\n\r\nconst pool = user.pool;\r\n\r\n\r\nconst signUp = (req, res) => {\r\n\r\n\r\nlet {email, username, password, verify} = req.body;\r\nlet mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\nusername = username.replace(/[^0-9A-Za-z\\,]/g, \"\").toLowerCase();\r\n\r\nif(username === ''){\r\n    return res.status(400).send({\r\n        success: `false`,\r\n        message: `All fields are required`,\r\n        field: `username`\r\n    })\r\n}\r\n\r\nif(!email.match(mailformat)){\r\n    return res.status(400).send({\r\n        success: `false`,\r\n        message: `Enter a valid email`,\r\n        field: `email`\r\n    })\r\n}\r\n\r\nif(password === ''){\r\n    return res.status(400).send({\r\n        success: `false`,\r\n        message: `All fields are required`,\r\n        field: `password`\r\n    })\r\n}\r\n\r\nif(verify === ''){\r\n    return res.status(400).send({\r\n        success: `false`,\r\n        message: `All fields are required`,\r\n        field: `verify`\r\n    })\r\n}\r\n\r\npool.query('SELECT * FROM users WHERE (email = $1 OR username = $2)', [email, username], (err, result) => {\r\n  \r\n    if(typeof(result.rows[0]) !== 'undefined'){\r\n       \r\n        const db = result.rows[0];\r\n\r\n        if(db.username === username){\r\n            return res.status(400).send({\r\n                success: `false`,\r\n                message: `Username already taken by another user`,\r\n                field: `username`\r\n            })\r\n        }\r\n  \r\n        if(db.email === email){\r\n            return res.status(400).send({\r\n                success: 'false',     \r\n                message: 'Email is associated with another user',\r\n                field: `email`\r\n            }); \r\n        }\r\n\r\n    }else{\r\n        if(password !== verify){\r\n            return res.status(400).send({\r\n                success: 'false',     \r\n                message: 'Password does not match',\r\n                field: `verify`\r\n            }); \r\n        }\r\n\r\n\r\n        bcrypt.hash(password, 10, (err, hash) => {\r\n            if(err) {\r\n                \r\n                return res.status(400).send({\r\n                   success: `false`,\r\n                   message: err\r\n                });\r\n            }else{\r\n                pool.query('INSERT INTO users (email, username, password, signupdate, answers) VALUES($1, $2, $3, $4, $5)', \r\n                [email, username, hash, new Date(), 0], (err, result) => {\r\n                   \r\n                        if(result){\r\n\r\n                            return res.status(201).send({\r\n                                success: `true`,\r\n                                message: `Your Signed up was successful`\r\n                            });\r\n                        }else{\r\n                            console.log(err);\r\n                            return res.status(400).send({\r\n                                success: `false`,\r\n                                message: err\r\n                            });\r\n                        }\r\n                });\r\n\r\n                }\r\n        })\r\n    }\r\n\r\n    })\r\n};\r\n\r\nexport default signUp;\r\n"]}