{"version":3,"sources":["choosenAnswer.js"],"names":["pool","user","choosenAnser","req","res","id","parseInt","params","questionId","answer","answerId","query","err","result","answersArray","rows","answers","newAns","newArray","length","forEach","checker","JSON","parse","choosen","push","error","resp","status","send","success","message","Alength"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,OAAOC,eAAKD,IAAlB;;AAGA,IAAME,eAAe,SAAfA,YAAe,CAACC,GAAD,EAAMC,GAAN,EAAc;;AAE/B,QAAMC,KAAKC,SAASH,IAAII,MAAJ,CAAWC,UAApB,EAAgC,EAAhC,CAAX;AACA,QAAMC,SAASH,SAASH,IAAII,MAAJ,CAAWG,QAApB,EAA8B,EAA9B,CAAf;;AAEAV,SAAKW,KAAL,CAAW,2CAAX,EAAwD,CAACN,EAAD,CAAxD,EAA8D,UAACO,GAAD,EAAMC,MAAN,EAAe;AAC7E,YAAGA,MAAH,EAAU;AACN,gBAAIC,eAAeD,OAAOE,IAAP,CAAY,CAAZ,EAAeC,OAAlC;;AAGA,gBAAIC,eAAJ;AAAA,gBAAYC,WAAW,EAAvB;AACA,gBAAGJ,aAAaK,MAAb,GAAsB,CAAzB,EAA2B;;AAE3BL,6BAAaM,OAAb,CAAqB,mBAAU;AAC3BC,8BAAUC,KAAKC,KAAL,CAAWF,OAAX,CAAV;AACAA,4BAAQG,OAAR,GAAkB,IAAlB;AACAN,6BAASO,IAAT,CAAcJ,OAAd;AAEH,iBALD;AAMAH,yBAAST,MAAT,EAAiBe,OAAjB,GAA2B,SAA3B;AAEC,aAVD,MAUK;AACDN,2BAAWI,KAAKC,KAAL,CAAWT,aAAaL,MAAb,CAAX,CAAX;AACAS,yBAASM,OAAT,GAAmB,SAAnB;AACAN,2BAAW,CAACA,QAAD,CAAX;AACH;;AAGDlB,iBAAKW,KAAL,CAAW,iDAAX,EAA8D,CAACO,QAAD,EAAWb,EAAX,CAA9D,EAA8E,UAACqB,KAAD,EAAQC,IAAR,EAAiB;;AAG3F,oBAAGA,IAAH,EAAQ;AACAvB,wBAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,uCADiB;AAEjBC,2DAFiB;AAGjBC,iCAASd,SAASC,MAAT,GAAiB,CAHT;AAIjBK,iCAASf;AAJQ,qBAArB;AAOH;AACJ,aAZL;AAaC;AACR,KArCG;AAwCH,CA7CD;;kBA+CeP,Y","file":"choosenAnswer.js","sourceRoot":"/home/sami/Documents/elint-retraced/github101/src","sourcesContent":["import user from './user';\n\nconst pool = user.pool;\n\n\nconst choosenAnser = (req, res) => {\n \n    const id = parseInt(req.params.questionId, 10);\n    const answer = parseInt(req.params.answerId, 10);\n\n    pool.query('SELECT answers FROM questions WHERE id=$1', [id], (err, result)=>{\n    if(result){\n        let answersArray = result.rows[0].answers;\n        \n        \n        let newAns, newArray = [];\n        if(answersArray.length > 1){\n        \n        answersArray.forEach(checker =>{\n            checker = JSON.parse(checker);\n            checker.choosen = null;\n            newArray.push(checker);\n           \n        })\n        newArray[answer].choosen = 'choosen';\n       \n        }else{\n            newArray = JSON.parse(answersArray[answer]);\n            newArray.choosen = 'choosen';\n            newArray = [newArray]\n        }\n        \n        \n        pool.query('UPDATE questions SET answers = $1 WHERE id = $2', [newArray, id], (error, resp) => {\n\n\n            if(resp){\n                    res.status(201).send({\n                        success: `true`,\n                        message: `Preferred answer updated`, \n                        Alength: newArray.length -1,\n                        choosen: answer\n                    })\n\n                }\n            })\n        }\n})\n\n    \n}\n\nexport default choosenAnser;"]}