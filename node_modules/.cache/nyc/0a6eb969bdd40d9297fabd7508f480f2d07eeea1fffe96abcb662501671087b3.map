{"version":3,"sources":["logIn.js"],"names":["pool","user","secret","app","use","bodyParser","json","urlencoded","extended","text","type","logIn","req","res","next","body","email","password","status","success","message","query","err","result","rows","bcrypt","compare","response","token","jwt","sign","expiresIn","cookie","username","answers"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAOC,eAAKD,IAAlB;AACA,IAAME,SAASD,eAAKC,MAApB;;AAEA,IAAMC,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAH,IAAIC,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAL,IAAIC,GAAJ,CAAQC,qBAAWI,IAAX,EAAR;AACAN,IAAIC,GAAJ,CAAQC,qBAAWC,IAAX,CAAgB,EAAEI,MAAM,kBAAR,EAAhB,CAAR;AACAP,IAAIC,GAAJ,CAAQ,6BAAR;;AAGA,IAAMO,QAAQ,SAARA,KAAQ,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,oBAEDF,IAAIG,IAFH;AAAA,QAErBC,KAFqB,aAErBA,KAFqB;AAAA,QAEdC,QAFc,aAEdA,QAFc;;;AAI1B,QAAGD,UAAU,EAAV,IAAgBC,aAAa,EAAhC,EAAmC;AAC/B,eAAOJ,IAAIK,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AACxBa,4BADwB;AAExBC;AAFwB,SAArB,CAAP;AAIH;;AAELpB,SAAKqB,KAAL,CAAW,kEAAX,EAA+E,CAACL,KAAD,CAA/E,EAAwF,UAACM,GAAD,EAAMC,MAAN,EAAiB;;AAEjG,YAAG,OAAOA,OAAOC,IAAP,CAAY,CAAZ,CAAP,KAA2B,WAA9B,EAA0C;;AAEtCC,+BAAOC,OAAP,CAAeT,QAAf,EAAyBM,OAAOC,IAAP,CAAY,CAAZ,EAAeP,QAAxC,EAAkD,UAACK,GAAD,EAAMK,QAAN,EAAmB;AACjE,oBAAGL,GAAH,EAAO;AACH,2BAAOT,IAAIK,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AACxBa,wCADwB;AAExBC;AAFwB,qBAArB,CAAP;AAIH;AACD,oBAAGO,QAAH,EAAY;AACR,wBAAMC,QAAQC,uBAAIC,IAAJ,CAAS;AACnBd,+BAAOA,KADY;AAEnBC,kCAAUM,OAAOC,IAAP,CAAY,CAAZ,EAAeP;AAFN,qBAAT,EAIdf,MAJc,EAKd;AACI6B;AADJ,qBALc,CAAd;;AAUJlB,wBAAImB,MAAJ,CAAW,UAAX,EAAuBT,OAAOC,IAAP,CAAY,CAAZ,EAAeS,QAAtC;AACApB,wBAAImB,MAAJ,CAAW,OAAX,EAAoBJ,KAApB;AACAf,wBAAImB,MAAJ,CAAW,SAAX,EAAsBT,OAAOC,IAAP,CAAY,CAAZ,EAAeU,OAArC;;AAEO;AACP,2BAAOrB,IAAIK,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AACpBa,uCADoB;AAEpBC,kDAFoB;AAGpBQ,+BAAOA;AAHa,qBAArB,CAAP;AAMC,iBAtBD,MAsBK;AACD,2BAAOf,IAAIK,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AAC5Ba,wCAD4B;AAE5BC;AAF4B,qBAArB,CAAP;AAIP;AACA,aAnCD;AAoCH,SAtCD,MAsCK;AACD,mBAAOP,IAAIK,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AAC5Ba,gCAD4B;AAE5BC;AAF4B,aAArB,CAAP;AAIP;AAEA,KA/CL;AAkDH,CA7DD;;kBA+DeT,K","file":"logIn.js","sourceRoot":"/home/sami/Documents/elint-retraced/github101/src","sourcesContent":["import pg from 'pg';\r\nimport bcrypt from 'bcryptjs';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport jwt from 'jsonwebtoken';\r\nimport user from './user';\r\nimport cookieParser from 'cookie-parser';\r\n\r\nconst pool = user.pool;\r\nconst secret = user.secret;\r\n\r\nconst app = express();\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.text());                                    \r\napp.use(bodyParser.json({ type: 'application/json'})); \r\napp.use(cookieParser());\r\n\r\n\r\nconst logIn = (req, res, next) => {\r\n\r\n        let {email, password} = (req.body);\r\n\r\n        if(email === '' || password === ''){\r\n            return res.status(400).json({\r\n                success: `false`,\r\n                message: `All fields are required`\r\n            })\r\n        }\r\n\r\n    pool.query('SELECT username, answers, password FROM users WHERE (email = $1)', [email], (err, result) => {\r\n\r\n            if(typeof(result.rows[0]) !== 'undefined'){\r\n            \r\n                bcrypt.compare(password, result.rows[0].password, (err, response) => {\r\n                    if(err){\r\n                        return res.status(404).json({\r\n                            success: `false`,\r\n                            message: `Invalid email or password`\r\n                        });\r\n                    }\r\n                    if(response){\r\n                        const token = jwt.sign({\r\n                            email: email,\r\n                            password: result.rows[0].password\r\n                        }, \r\n                        secret,\r\n                        {\r\n                            expiresIn: `1h`\r\n                        });\r\n                    \r\n                    \r\n                    res.cookie(\"username\", result.rows[0].username); \r\n                    res.cookie(\"token\", token); \r\n                    res.cookie(\"answers\", result.rows[0].answers)\r\n                    \r\n                           // res.redirect('localhost:5000/userpage.html')\r\n                    return res.status(200).json({\r\n                            success: `true`,\r\n                            message: `Auth successful`,\r\n                            token: token\r\n                        });\r\n                        \r\n                    }else{\r\n                        return res.status(404).json({\r\n                        success: `false`,\r\n                        message: `Invalid email or password`\r\n                    });\r\n                }\r\n                })\r\n            }else{\r\n                return res.status(404).json({\r\n                success: `false`,\r\n                message: `Invalid email or password`\r\n            });\r\n        }\r\n          \r\n        })\r\n        \r\n\r\n}\r\n\r\nexport default logIn;\r\n"]}